package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Field;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private Tuple next1 = null;
    private OpIterator next2 = child2;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.open = false;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        open = true;
    }

    public void close() {
        child1.close();
        child2.close();
        open = false;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        open = true;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // if(next1!=null){
        //     while(child1.hasNext()){
        //         Tuple child1Next = child1.next();
        //         while(child2.hasNext()){
        //             System.out.println("CHILD 1");
        //             System.out.println(child1Next.getFields().toString());
        //             System.out.println("CHILD 2");
        //             System.out.println(child2.next().getFields().toString());
        //         }
        //     }
        // }
        // else{
        //     next1=child1.next();
        //     while(child1.hasNext()){
        //         Tuple child1Next = child1.next();
        //         while(child2.hasNext()){
        //             System.out.println("CHILD 1");
        //             System.out.println(child1Next.getFields().toString());
        //             System.out.println("CHILD 2");
        //             System.out.println(child2.next().getFields().toString());
        //         }
        //     }
        // }
        // return null;
        //ITERATES first row outer through all inners
        // if(next1==null){
        //     next1 = child1.next();
        // }   
        
        
        while(child1.hasNext()){
            next1 = child1.next();
            while(child2.hasNext()){
                Tuple next2 = child2.next();
                if(p.filter(next1, next2)){
                    System.out.println("CHILD 1");
                    System.out.println(next1.getFields().toString());
                    System.out.println("CHILD 2");
                    System.out.println(next2.getFields().toString());
                }
            }
            child2.rewind();
            // if (!child1.hasNext()){
            //     child1.rewind();
            // }
        }

        return null;
        //CODE
        // System.out.printf("Child 1:%s",child1.next().toString());
        // while(next1!=null){
        //     while(next2.hasNext()){  
        //         Tuple child2Next = next2.next();
        //         if(p.filter(next1, child2Next)){
        //             Tuple toReturn = new Tuple(getTupleDesc());
        //             int i = 0;
        //             int s = next1.getFields().size();
        //             while (i<s){
        //                 toReturn.setField(i, next1.getField(i));
        //                 i++;
        //             }
        //             s = child2Next.getFields().size();
        //             while (i<s){
        //                 toReturn.setField(i, child2Next.getField(i));
        //                 i++;
        //             }
        //             System.out.println(toReturn);
        //             return toReturn;
        //         }
        //     }
        //     next2 = child2;
        //     next1=child1.next();
        // }
        // next1=child1.next();
        // next2 = child2;
        // while(next2.hasNext()){  
        //     Tuple child2Next = next2.next();
        //     if(p.filter(next1, child2Next)){
        //         Tuple toReturn = new Tuple(getTupleDesc());
        //         int i = 0;
        //         int s = next1.getFields().size();
        //         while (i<s){
        //             toReturn.setField(i, next1.getField(i));
        //             i++;
        //         }
        //         s = child2Next.getFields().size();
        //         while (i<s){
        //             toReturn.setField(i, child2Next.getField(i));
        //             i++;
        //         }
        //         System.out.println(toReturn);
        //         return toReturn;
        //     }
        // }
        // return null;
        ////PAUSE
        // while(child2.hasNext()){
        //     Tuple child2Next = child2.next();
        //     if(p.filter(next1, child2Next)){
        //         Tuple toReturn = new Tuple(getTupleDesc());
        //         int i = 0;
        //         int s = next1.getFields().size();
        //         while (i<s){
        //             toReturn.setField(i, next1.getField(i));
        //             i++;
        //         }
        //         s = child2Next.getFields().size();
        //         while (i<s){
        //             toReturn.setField(i, child2Next.getField(i));
        //             i++;
        //         }
        //         return toReturn;
        //     }
        // }
        // // }
        // //next1=child1.next();
        // return null;

    }

    @Override
    public OpIterator[] getChildren() {
        // TODO: some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // TODO: some code goes here
    }

}
